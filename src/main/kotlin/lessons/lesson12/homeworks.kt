package org.popkova.lessons.lesson12

package org.popkova.lessons
//Задачи на приведение коллекции к значению

private fun List<Int>.isEmpty(function: () -> Unit): Boolean {}

fun main() {
//Проверить, что размер коллекции больше 5 элементов.

    val coll = listOf(1,2,3,4,5,6)

    if (coll.size >5)
//Проверить, что коллекция пустая
        if (coll.isEmpty())
//Проверить, что коллекция не пустая
            if (coll.isNotEmpty())
//Взять элемент по индексу или создать значение если индекса не существует
    val in = coll.getOrElse(15) {10}
//Собрать коллекцию в строку
    val str = coll.joinToString {  }
//Посчитать сумму всех значений
    val sum = coll.sum()
//Посчитать среднее
    val av = coll.average()
//Взять максимальное число
    val max = coll.maxOrNull()
//Взять минимальное число
    val min = coll.minOrNull()
//Взять первое число или null
    val frst = coll.firstOrNull()
//Проверить что коллекция содержит элемент
    val cont = coll.contains(2)


//Задачи на обработку коллекций

//Отфильтровать коллекцию по диапазону 18-30
    val perv = coll.filter { it in 18 .. 30 }
//Выбрать числа, которые не делятся на 2 и 3 одновременно
    val vtor = coll.filter { it%2!=0 && it%3!=0}
//Очистить текстовую коллекцию от null элементов
    val tri = coll.filterNotNull()
//Преобразовать текстовую коллекцию в коллекцию длин слов
    val chet = listOf("один", "два","три")
    val chet1 = chet.map{it.length}
//Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val pat = chet.associate { it.reversed() to it.length}
//Отсортировать список в алфавитном порядке
    val six = chet.sorted()
//Взять первые 3 элемента списка
    println(chet.take(3))
//Распечатать квадраты элементов списка
    println(coll.forEach { it * it })
//Группировать список по первой букве слов
    val gr = chet.groupBy { it.first() }
//Очистить список от дублей
    val clean = chet.distinct()
//Отсортировать список по убыванию
    val clean1 = chet.sortedDescending()
//Взять последние 3 элемента списка
    println(chet.takeLast(3))
//
//
//Характеристика числовой коллекции
//
//Если коллекция пустая - “Пусто”
    if (coll.isEmpty()){
        println("Пусто)
    } else{
        println(coll)
    }
//Если количество элементов меньше пяти - “Короткая”
    if (coll.size<5){
        println("Короткая")
    }
    else{
        println(coll)
    }
//Если коллекция начинается с 0 - “Стартовая”
    if (coll.isNotEmpty() && coll.first()==0){
        println("Стартовая")
    }
    else{
        println(coll)
    }

//Если сумма всех чисел больше 10000 - “Массивная”
    if (coll.sum()>1000){
        println("Массивная")}
    else{
        println(coll)
    }
//Если среднее значение равно 10 - “Сбалансированная”
    if (coll.average()==10.0){
        println("Сбалансированная")}
    else{
        println(coll)
    }
//Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
    val new = chet.joinToString { "" }
    if (new.length==20){
        println("Клейкая")
    }

//Если максимальное число меньше -10 - “Отрицательная”
    if (coll.max() <10.0){
        println("Отрицательная")
    }
//Если минимальное число больше 1000 - “Положительная”
    if (coll.max() >1000){
        println("Положительная")
    }
//Если содержит одновременно числа 3 и 14 - “Пи***тая”
//Иначе - “Уникальная”
    if (coll.contains(3)&& coll.contains(14)){
        println("Пи***тая")
    }
    else{
        println("Уникальная")
    }
//
//Анализ учебных оценок
//Напиши функцию, которая принимает список чисел и возвращает список чисел
//
//Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//
//Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3. Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода являлся основой для следующего.
//
//Создание каталога по первой букве
//
//Начальные значения: val list = listOf(
//    "Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка"
//)
//Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
//
//Подсчёт средней длины слов в списке
//
//Напиши функцию, которая принимает список строк и возвращает строку.
//
//Начальные значения взять из предыдущей задачи.
//
//Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с двумя знаками после запятой, используя функцию format и подходящий шаблон.
//
//Категоризация чисел
//
//Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//
//Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//
//Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
//
//Поиск первого подходящего элемента
//Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//
//Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//
//Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его, либо null если значения не нашлось.
//
}